// Generated by CoffeeScript 1.3.3
(function() {
  var Chromosome, Population, display, i, p,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Chromosome = (function() {

    Chromosome.target = "Learning is not attained by chance, it must be sought for with ardor and diligence.";

    function Chromosome() {
      this.mutate = __bind(this.mutate, this);

      var i;
      this.code = String.fromCharCode.apply(String, (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Chromosome.target.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(Math.floor(Math.random() * 94) + 32);
        }
        return _results;
      })());
    }

    Chromosome.prototype.mutate = function() {
      var chromosome, index, mutated, shift_by;
      index = Math.floor(Math.random() * Chromosome.target.length);
      while (!shift_by) {
        shift_by = Math.floor(Math.random() * 11) - 5;
      }
      mutated = String.fromCharCode(this.code[index].charCodeAt(0) + shift_by);
      chromosome = new Chromosome;
      chromosome.code = this.code.substr(0, index) + mutated + this.code.substr(index + 1);
      return chromosome;
    };

    Chromosome.prototype.mate = function(chromosome) {
      var child1, child2, index;
      index = Chromosome.target.length / 2;
      child1 = new Chromosome;
      child1.code = this.code.substr(0, index) + chromosome.code.substr(index);
      child2 = new Chromosome;
      child2.code = chromosome.code.substr(0, index) + this.code.substr(index);
      return [child1, child2];
    };

    Chromosome.prototype.cost = function() {
      var i, total, _i, _ref;
      total = 0;
      for (i = _i = 0, _ref = this.code.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        total += Math.abs(this.code[i].charCodeAt(0) - Chromosome.target[i].charCodeAt(0));
      }
      return total;
    };

    return Chromosome;

  })();

  Population = (function() {

    Population.size = 50;

    function Population() {
      var i;
      this.chromosomes = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = Population.size; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new Chromosome);
        }
        return _results;
      })();
    }

    Population.prototype.sort = function() {
      return this.chromosomes.sort(function(a, b) {
        if (a.cost() > b.cost()) {
          return 1;
        } else {
          return -1;
        }
      });
    };

    Population.prototype.kill = function(n) {
      return this.chromosomes = this.chromosomes.slice(0, this.chromosomes.length - n);
    };

    Population.prototype.mate = function(n) {
      var c1, c2, children, i, _i, _ref;
      n = Math.min(n, this.chromosomes.length - 1);
      children = [];
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        c1 = this.chromosomes[i];
        c2 = this.chromosomes[i + 1];
        children.push.apply(children, c1.mate(c2));
      }
      return (_ref = this.chromosomes).push.apply(_ref, children);
    };

    Population.prototype.mutate = function(n) {
      var i, _i, _results;
      n = Math.min(n, this.chromosomes.length);
      _results = [];
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        _results.push(this.chromosomes[i] = this.chromosomes[i].mutate());
      }
      return _results;
    };

    Population.prototype.score = function() {
      return this.chromosomes[0].cost();
    };

    Population.prototype.evolve = function() {
      this.sort();
      this.kill(20);
      this.mate(10);
      this.mutate(20);
      return this.sort();
    };

    return Population;

  })();

  display = function(n) {
    return console.log("Generation " + i + " (" + p.score() + "):\t\t" + p.chromosomes[0].code);
  };

  p = new Population;

  i = 0;

  display(i);

  while (p.score() !== 0) {
    p.evolve();
    i += 1;
    display(i);
  }

}).call(this);
